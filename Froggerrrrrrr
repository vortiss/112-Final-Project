import javax.swing.JPanel;
import javax.swing.JFrame;
import java.awt.*;
import java.util.Random;
import javax.imageio.ImageIO;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.FileSystems;
import java.awt.event.KeyListener;
import java.awt.event.KeyEvent;

public class Frogger extends JPanel implements KeyListener{
    public static final int WIDTH = 1024;
    public static final int HEIGHT = 768;
    public static final int FPS = 60;
    World world;
    static DrawImage di;
    
    class Runner implements Runnable{
	public void run(){
	    while(true){
		world.updateState();
		repaint();
		try{
		    Thread.sleep(1000/FPS);
		}
		catch(InterruptedException e){}
	    }
	    
	}
	
    }
    
    public void keyPressed(KeyEvent e) {
	commands(e);
    }
    
    public void addNotify() {
	super.addNotify();
	requestFocus();
    }
    public void keyReleased(KeyEvent e){
	
    }
    
    public void keyTyped(KeyEvent e){
	
    }
    public void commands(KeyEvent e){
	char c=e.getKeyChar();
	if(c=='w'||c=='a'||c=='s'||c=='d')
	    userObject.move(c,world);
	/*	if(c=='p')
	    this=new Frogger(); */
	if(c=='l'){			
	    System.out.println("Thanks for playing!");			
	    System.exit(0);
	}
    }
    
    public Frogger(){
	world = new World(WIDTH, HEIGHT,16,16,this);
	addKeyListener(this);
	this.setPreferredSize(new Dimension(WIDTH, HEIGHT));
	Thread mainThread = new Thread(new Runner());
	mainThread.start();
    }
    
    public static void main(String[] args){
	JFrame frame = new JFrame("Frogger+");
	di=new DrawImage();
	frame.add(di);
	frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
	Frogger mainInstance = new Frogger();
	frame.setContentPane(mainInstance);
	frame.pack();
	frame.setVisible(true);
    }
    @Override
	public void paintComponent(Graphics g) {
	super.paintComponent(g);
	for (int i = 1; i < 13; i++){
	    if (i % 3 == 2)
		g.setColor(Color.GREEN);
	    if (i % 3 == 1) 	
		g.setColor(Color.GRAY);
	    if(i % 3 == 0)
		g.setColor(Color.BLUE);	
	    
	    g.fillRect(0,i*world.height/12, world.width, world.height/12);
	    
	}
	for(int i=0;i<world.numObstacles;i++){
	    world.obstacles[i].draw(g,world);
	}	
    
  	for (int i = 0; i < world.numLog; i ++){
	    world.logs[i].draw(g,world);
	}
    
	userObject.draw(g,world);
	
    }
}

class World{
    static int height;
    static int width;
    int numObstacles;
    int numLog;
    Obstacle[] obstacles;
    environmentalObjects[] logs;
    Terrain zone;
    userObject player;
    Pair[] position;
    Pair[] positionlogs;
    userObject frog;
    Frogger gameRunning;
    
    public World(int initWidth, int initHeight,int numObstacle, int numLog, Frogger game){
	gameRunning=game;
	position = new Pair[numObstacle];
	positionlogs = new Pair[numLog];
	obstacles=new Obstacle[numObstacle];
	logs = new environmentalObjects[numLog];
	frog = new userObject(this);
	width=initWidth;
	height=initHeight;	

	for (int i=0; i<numObstacle/4;i++){
	    position[i] =new Pair(0.0, (double)(height/36*(4) + 9*i));   
	}
	for (int i = numObstacle/4; i < numObstacle/2; i++){
	    position[i] =new Pair(0.0,(double)(height/36*5 + 9*i));
	}
	for (int i = numObstacle/2; i < numObstacle*3/4; i++){
	    position[i] =new Pair((double)width, (double)(height/36*4 + 9*i));	
	}
	for (int i = numObstacle*3/4; i<numObstacle; i++){
	    position[i] =new Pair ((double)width, (double)(height/36*5 + 9*i));
	}
	for (int i= 0; i<numLog/4;i++){
	    positionlogs[i] =new Pair (0.0, (double)(height/36*(7) + 9*i));   
	}
	for (int i = numLog/4; i < numLog/2; i++){
	    positionlogs[i] =new Pair (0.0, (double)(height/36*8 + 9*i));
	}
	for (int i = numLog/2; i < numLog*3/4; i++){
	    positionlogs[i] =new Pair ((double)width, (double)(height/36*7 + 9*i));	
	}
	for (int i = numLog*3/4; i<numLog; i++){
	    positionlogs[i] =new Pair ((double)width, (double)(height/36*8 + 9*i));
	}
	for(int i=0; i < numObstacle;i++){
	    if (i < numObstacle / 2)
		obstacles[i]=new Obstacle(position[i], 1);
	    if (i >= numObstacle/2)
		obstacles[i] = new Obstacle(position[i], 0);
	}
	
	for(int i=0; i < numLog; i++){
	    if (i < numLog / 2)
		logs[i]=new environmentalObjects(position[i], 1);
	    if (i >= numLog/2)
		logs[i] = new environmentalObjects(position[i], 0);

	}
    }
    
    public void gameOver(Graphics g){ 
	g.setColor(Color.BLACK);
	g.drawRect(0,0,width,height);
	g.setColor(new Color(202,13,13));
	g.drawString("You died not once, not twice, but thrice. Press p to play again or l to leave", (width/2)-63, height/2);
    	
	boolean decision=false;
	while(!decision){
	    try{
		Thread.sleep(3000);
	    }
	    catch(InterruptedException e){}
	}
    }
    
    public boolean incontact(){
	for (int i = 0; i < numLog; i++){
	    if ((frog.position.x<=(logs[i].position.x+logs[i].size.x)&&frog.position.x>=logs[i].position.x&&frog.position.y>=logs[i].position.y&&frog.position.y<=(logs[i].position.y+logs[i].size.y))||((frog.position.x+frog.width)<=(logs[i].position.x+logs[i].size.x)&&(frog.position.x+frog.width)>=logs[i].position.x&&frog.position.y>=logs[i].position.y&&frog.position.y<=(logs[i].position.y+logs[i].size.y)))
		return true;
	}
	return false;
	
    }
    
    public environmentalObjects contactLog(){
	for (int i = 0; i < numLog; i++){
	    if ((frog.position.x<=(logs[i].position.x+logs[i].size.x)&&frog.position.x>=logs[i].position.x&&frog.position.y>=logs[i].position.y&&frog.position.y<=(logs[i].position.y+logs[i].size.y))||((frog.position.x+frog.width)<=(logs[i].position.x+logs[i].size.x)&&(frog.position.x+frog.width)>=logs[i].position.x&&frog.position.y>=logs[i].position.y&&frog.position.y<=(logs[i].position.y+logs[i].size.y)))
		
		return logs[i];
	}
        return null;
	
    }
    
    public void updateState(){
	for (int i = 0; i < numObstacles; i++){	
	    
	    obstacles[i].update(this);
	    logs[i].update(this);
	    if (incontact()){
		frog.position.x = frog.position.x + contactLog().speed;
	    }
	}	
	frog.stillAlive(this);
	
	
    }
    
    public void drawObstacles(Graphics g){
	for(int i=0;i<numObstacles;i++){
	    obstacles[i].draw(g,this);
	}	
    }
    
    public void drawLogs(Graphics g){
	for (int i = 0; i < numLog; i ++){
	    logs[i].draw(g,this);
	}
    }
    
    public void drawUserObject(Graphics g){
	frog.draw(g,this);
    }
    
}

class DrawImage extends JPanel{
    static Image picture;
    static Toolkit kit;
    
    public DrawImage(){
	kit=Toolkit.getDefaultToolkit();
	picture=null;
    }
    
    public static void changePicture(String pictureName){
	try{

	    File f=new File("finalProject");
	    File[] list=f.listFiles();
	    boolean done=false;
	    int loops=0;	    
	    while(!done){
		if(list[loops].isDirectory())
		    done=true;
		else{loops++;}
	    }
		
	    File read=new File(list[loops].toString()+"/"+pictureName+".png");
	    picture=ImageIO.read(read);
	}
	catch(Exception e){
	    System.out.println(e);
	}
    }
}
