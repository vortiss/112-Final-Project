import java.util.Random;
import java.awt.event.KeyListener;
import java.awt.event.KeyEvent;
import java.awt.*;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import javax.imageio.ImageIO;
import java.awt.geom.Rectangle2D;

class userObject{
    private static int lives;
    static Pair position;
    static boolean alive;
    static String facing;
    static int width;
    static int height;
    
    public userObject(World w){
	width=32;
	height=32;
	facing="Up";
	alive=true;
	lives=3;
	position=new Pair((double)(w.width/2),(double)(w.height-21));
	DrawImage.changePicture("Frog_"+facing+"_Sprite_0");
	w.gameRunning.repaint();
	
    }
    
    public static void draw(Graphics g, World w){
	DrawImage.changePicture("Frog_"+facing+"_Sprite_0");
	g.drawImage(DrawImage.picture, (int)position.x,(int)position.y,width,height,null); 
    }
    
    public static void move(char direction, World w){
	/*Find some way to make the animations smoother (adding more frames, probably through for loops) without fucking up the background*/
	if(direction=='w'){
	    facing="Up";
	    DrawMove(w);	
	}
	if(direction=='a'){
	    facing="Left";
	    DrawMove(w);
	}
	if(direction=='s'){
	    facing="Down";
	    DrawMove(w);
	}
	if(direction=='d'){
	    facing="Right";
	    DrawMove(w);
	}	
	DrawImage.changePicture("Frog_"+facing+"_Sprite_0");
	stillAlive(w);
    }
    
    public static void DrawMove(World w){
	DrawImage.changePicture("Frog_"+facing+"_Sprite_1");
	try{Thread.sleep(3);}catch(InterruptedException e){}
	if(facing.equals("Left")||facing.equals("Right")){
	    for(int i=0;i<16;i++){
		if(i/8<1)
		    DrawImage.changePicture("Frog_"+facing+"_Sprite_2");
		if(i/8>=1)
		    DrawImage.changePicture("Frog_"+facing+"_Sprite_3");
		if(facing.equals("Right"))
		    position.x=position.x+1;
		if(facing.equals("Left"))
		    position.x=position.x-1;
		w.gameRunning.repaint();
		try{Thread.sleep(3);}catch(InterruptedException e){}
	    }
	}
	if(facing.equals("Up")||facing.equals("Down")){
	    for(int i=0;i<12;i++){
		if(i/6<1)
		    DrawImage.changePicture("Frog_"+facing+"_Sprite_2");
		if(i/6>=1)
		    DrawImage.changePicture("Frog_"+facing+"_Sprite_3");
		if(facing.equals("Up"))
		    position.y=position.y-1;
		if(facing.equals("Down"))
		    position.y=position.y+1;
		w.gameRunning.repaint();
		try{Thread.sleep(3);}catch(InterruptedException e){}
	    }
	}
    }
    
    public static void stillAlive(World w){
	int i=0;
	while(alive&& i<w.obstacles.length){
	    if(position.equals(w.obstacles[i].position)){
		alive=false;
	    }
	    i++;
	}
	if(!alive&&lives>0){
	    lives=lives-1;
	    position.x=0.0+w.width/2;
	    position.y=0.0+w.height;
	    alive=true;
	    w.gameRunning.repaint();
	} 
	if ( ( (position.y >= w.height*2/12 && position.y <= w.height*3/12) || 
	       (position.y >= w.height*5/12 && position.y <= w.height*6/12) || 
	       (position.y >= w.height*8/12 && position.y <= w.height*9/12) ||
	       (position.y >= w.height*11/12 && position.y <= w.height)) && !w.incontact() && alive ) {
	    alive=false;
	    lives = lives - 1;
	    facing="Up";
	    position.x = w.width/2;
	    position.y = w.height;
	    alive=true;
	    w.gameRunning.repaint();
	}
	
	if((!alive&&lives<=0)||lives<0){ /*w.gameover();*/ }
	
    }
}

class Pair{
    public int x;
    public int y;
    
    public Pair(int initX, int initY){
	x = initX;
	y = initY;
    }
    /* 
       public Pair add(Pair toAdd){
	return new Pair(x + toAdd.x, y + toAdd.y);
    }
    
    public Pair divide(double denom){
	return new Pair(x / denom, y / denom);
    }
    public Pair times(double val){
	return new Pair(x * val, y * val);
	}*/
    public boolean equals(Pair compare){
	boolean equal=false;
	if(x==compare.x&&y==compare.y){
	    equal=true;
	}
	return equal;
    }
}

class Obstacle{
    int speed;
    Pair size;
    Pair position;
    Random rand;
    String facing;
    
    public Obstacle(Pair p, int leftorright){	
	rand=new Random();
	if (leftorright == 1){
	    facing="Right";
	    speed=1+rand.nextInt(10);
	}
	else {
	    facing="Left";
	    speed = -1-rand.nextInt(10);
	}
	size = new Pair(40,32);
	position=p;
	
    }
    
    public void update(World w){
	position.x=position.x+speed;
	if (speed < 0)
	    if (position.x <= 0)
		position.x = w.width;
	
	if (speed > 0)
	    if (position.x >= w.width)
		position.x = 0;
    }
    
    public void draw(Graphics g, World w){
	String color;
	if(rand.nextInt(2)==1)
	    color="Blue";
	else{color="Red";}
	DrawImage.changePicture("Car_"+facing+"_Sprite_"+color);
	g.drawImage(DrawImage.picture,position.x,position.y,size.x,size.y,null);
    }	
}

class environmentalObjects{
    int speed;
    Pair size;
    int type;
    Pair position;
    Random rand;
    
    public environmentalObjects(Pair p, int leftorright){
	rand=new Random();	
	if (leftorright == 1){
	    speed=1+rand.nextInt(10);
	}
	else {
	    speed = -1-rand.nextInt(10);
	}
	size = new Pair(32,32);
	position=p;
	
    }
    
    
    public void update(World w){
	position.x=position.x+speed;
	if (speed < 0)
	    if (position.x <= 0)
		position.x = w.width;
	
	if (speed > 0)
	    if (position.x >= w.width)
		position.x = 0;
    }
    
    public void draw(Graphics g, World w){	
	DrawImage.changePicture("Log_Sprite");
	g.drawImage(DrawImage.picture,position.x,position.y,size.x,size.y,null);
    }
    
}


class Terrain{
    
    public Terrain(){
	
    }
    
    public void build(Graphics g, World w){
	for (int i = 0; i < 12; i++){
	    if (i % 3 == 2)
		g.setColor(Color.GREEN);
	    if (i % 3 == 1) 	
		g.setColor(Color.GRAY);
	    if(i % 3 == 0)
		g.setColor(Color.BLUE);	
	    
	    g.fillRect(0,i*w.height/12, w.width, w.height/12);
	    
	}
    }	
}
