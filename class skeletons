import java.util.Random;
import java.util.Scanner;
import java.awt.event.KeyListener;
import java.awt.event.KeyEvent;
import java.awt.Graphics;

class userObject{
    private static int lives;
    pair position;
    image player;
    private boolean alive;
    
    public static userObject(World w){
	alive=true;
	lives=3;
	position(w.initWidth/2,w.initHeight-/*Ycoordinate of the top left corner of the sprit*/);
	
    }
    
    public void move(char c, World w){
	if(c=='w'){
	    position.y=position.y-30;
	}
	if(c=='a'){
	    position.x=position.x-30;
	}
	if(c=='s'){
	    position.y=position.y+30;
	}
	if(c=='d'){
	    position.x=position.x+30;
	}
	stillAlive(w);
    }
    
    public void stillAlive(World w){
	int i=0;
	while(alive&&i<world.obstacles.size()){
	    if(position.equals(world.obstacles[i].position)){
				alive=false;
	    }
	    i++;
	}
	if(!alive&&lives>0){
	    lives=lives-1;
	    position.x=w.initWidth/2
		position.y=/*Y coordinate of the top left corner of sprite at the the start*/;
	    alive=true;
	}
	else{ w.gameover();}
    }
    
}

class Pair{
    public double x;
    public double y;
    
    public Pair(double initX, double initY){
	x = initX;
	y = initY;
    }
    
    public Pair add(Pair toAdd){
	return new Pair(x + toAdd.x, y + toAdd.y);
    }
    
    public Pair divide(double denom){
	return new Pair(x / denom, y / denom);
    }
    
    public Pair times(double val){
	return new Pair(x * val, y * val);
    }
    
    @Override
	public boolean equals(pair compare){
	boolean equal=false;
	if(x==compare.x&&y==compare.y){
	    equal=true;
	}
	return equal;
    }
}
class Obstacle{
    double speed;
    Pair size;
    int type;
    Pair position;
    Scanner pictureFinder;
    Random rand;
    
    public obstacles(){	

	speed=0.0+rand.nextInt(10);
	for (int i = 1; i < 5; i++){
	if(rand.nextInt(100)<50){
	    size=new Pair(5,10);
	    position = (0, world.height/36*(4) + 9*i);
	    position= (0, world.height/36*(5) + 9*i);
	}
	else {
	size = new Pair(5,10);
	position =(world.width, world.height/36*4 + 9*i);
	position = (world.width, world.height/36*5 + 9*i);
	}
}
    }
    
    public void update(double time){
	position.x=position.x+speed*time;
    }
    public void draw(Graphics g){	
    
	    for (int i = 1; i < 13; i++){
		if (i % 3 == 2)
		    {g.setColor(Color.GREEN);}
		if (i % 3 == 1) 	
		    {g.setColor(Color.GREY);}
		if(i % 3 == 0)
		    {g.setColor(Color.BLUE);}
		    (g.fill(new Rectangle 2D.Double(0, i*HEIGHT/12, width, HEIGHT/12)));
		
	g.drawRect(position.x,position.y,size.x,size.y);
    }	
}

class environmentalObjects{
double speed; 
pair size;
int type;

}

class powerup{
    pair position;
    Random rand;
    public powerup(){
	rand=new Random;	
	position=new pair(0.0+rand.nextInt,0.0+rand.nextInt);
    }
}

class terrain{
    
    public terrain(Graphics g){
	build( g);
	
    }
    
    public void build( Graphics g){
	
	    for (int i = 1; i < 13; i++){
		if (i % 3 == 2)
		    {g.setColor(Color.GREEN);}
		if (i % 3 == 1) 	
		    {g.setColor(Color.GREY);}
		if(i % 3 == 0)
		    {g.setColor(Color.BLUE);}
		    (g.fill(new Rectangle 2D.Double(0, i*HEIGHT/12, width, HEIGHT/12)));
		
	    
	}
    }	
}
