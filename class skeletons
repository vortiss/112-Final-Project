import java.util.Random;
import java.awt.event.KeyListener;
import java.awt.event.KeyEvent;
import java.awt.Graphics;
import java.awt.Colors;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import javax.imageio.ImageIO;

class userObject{
	private static int lives;
	pair position;
	image player;
	private boolean alive;
	imageInput pictureFinder;
	String facing;
	int width;
	int height;
	
	public static userObject(World w){
		width=/*however wide we want it*/
		height=/*however tall we want it*/
		Facing="Up";
		alive=true;
		lives=3;
		position(w.width/2,w.height-/*Ycoordinate of the top left corner of the sprit*/);
		player = pictureFinder("Frogs_"+facing);
		
	}
	
	public void draw(g)[
		g.drawImage(player, position.x,position.y,width,height,null); 
	}
	
	public void move(char c, World w){
	/*Find some way to make the animations smoother (adding more frames, probably through for loops) without fucking up the background*/
		if(c=='w'){
			facing="Up"
			player=pictureFinder.changePicture("Frog_"+facing+"_Sprite_0");
			position.y=position.y-21.3;
		}
		if(c=='a'){
			facing="Left";
			player=pictureFinder.changePicture("Frog_"+facing+"_Sprite_0");
			position.x=position.x-21.3;
		}
		if(c=='s'){
			facing="Down";
			player=pictureFinder.changePicture("Frog_"+facing+"_Sprite_0");
			position.y=position.y+21.3;
		}
		if(c=='d'){
			facing="Right";
			player=pictureFinder.changePicture("Frog_"+facing+"_Sprite_0");
			position.x=position.x+21.3;
		}
		stillAlive(w);
		w.gameRunning.repaint();
	}
		
	public void stillAlive(World w){
		int i=0;
		while(alive&&i<world.obstacles.size()){
			if(position.equals(world.obstacles[i].position)){
				alive=false;
			}
			i++;
		}
		if(!alive&&lives>0){
			lives=lives-1;
			position.x=0.0+w.initWidth/2;
			position.y=0.0+height;
			alive=true;
		} 
		else if ( ((position.y >= w.height/6) && (position.y <= w.height/4)) || 
		((position.y >= w.height*5/12) && (position.y <= w.height/2)) || 
		((position.y >= w.height*2/3) && (position.y <= w.height*3/4)) ||
		((position.y >= w.height*11/12) && (position.y <= w.height)) && (!incontact()) ) {
		lives = lives - 1;
		position.x = 0/0 + w.initWidth/2;
		position.y = 0.0+height;
		
		}
		
		else { if(!alive&&lives<=0) w.gameover(); }
	}
    
}

class Pair{
	public double x;
	public double y;
	
	public Pair(double initX, double initY){
		x = initX;
		y = initY;
	}
	
	public Pair add(Pair toAdd){
		return new Pair(x + toAdd.x, y + toAdd.y);
	}
	
	public Pair divide(double denom){
		return new Pair(x / denom, y / denom);
	}
	public Pair times(double val){
		return new Pair(x * val, y * val);
        }
	
	@Override
	public boolean equals(pair compare){
		boolean equal=false;
		if(x==compare.x&&y==compare.y){
	        	equal=true;
		}
		return equal;
        }



}

class Obstacle{
    double speed;
    Pair size;
    int type;
    Pair position;
    Scanner pictureFinder;
    Random rand;
    
    public Obstacle(Pair p, int leftorright){	
	if (leftorright == 1){
		speed=0.0+rand.nextDouble(10.0);
	}
	else {
		speed = 0.0 - rand.nextDouble(10.0);
	}
	size = new Pair(10,5);
	position.x = p.x;
	position.y = p.y;
	
	
	}
    }
    
    public void update(){
	position.x=position.x+speed
	if (speed < 0)
		if (position.x <= 0)
			position.x = World.width;
			
	if (speed > 0)
		if (position.x >= World.width)
			position.x = 0;
    }
    
    public void draw(Graphics g){
	g.drawRect(position.x,position.y,size.x,size.y);
    }	
}

class environmentalObjects{
	double speed;
	Pair size;
	int type;
	Pair position;
	imageInput pictureFinder;
	Random rand;
	image object;
    	
	public environmentalObjects(Pair p, int leftorright){
		if (leftorright == 1){
			speed=10*rand.nextDouble();
		}
		else {
			speed = -10*rand.nextDouble();
		}
		size = new Pair(10,5);
		position.x = p.x;
		position.y = p.y;
		pictureFinder=new imageInput("log");
	}
    

    public void update(){
     	position.x=position.x+speed
	      if (speed < 0)
	      	if (position.x <= 0)
			 position.x = World.width;
			
	if (speed > 0)
		if (position.x >= World.width)
			position.x = 0;
    }
    
    public void draw(Graphics g){	
    	
    }
    
    	public void update(){
		position.x=position.x+speed
    	}
    	public void draw(Graphics g){
		g.drawRect(position.x,position.y,size.x,size.y);
	}	

}

class powerup{
    	pair position;
    	Random rand;
	
    	public powerup(){
	rand=new Random;	
	position=new pair(0.0+rand.nextInt,0.0+rand.nextInt);
    }
}

class terrain{
    
    public terrain(Graphics g){
	build(g);
	
    }
    
    public void build( Graphics g){
	
	    for (int i = 1; i < 13; i++){
		if (i % 3 == 2)
		    {g.setColor(Color.GREEN);}
		if (i % 3 == 1) 	
		    {g.setColor(Color.GREY);}
		if(i % 3 == 0)
		    {g.setColor(Color.BLUE);}
		    (g.fill(new Rectangle2D.Double(0,i*HEIGHT/12, width, HEIGHT/12)));
		
	    
	}
    }	
}

public class ImageInput{

	public ImageInput(String pictureName){
	 	try{
      			BufferedImage animal = ImageIO.read(new File("/Users/al/"+pictureName+".png"));
     		} 
    		catch (IOException e){}
	}
	
	public void changePicture(String PictureName){
		try{
			BufferedImage animal=ImageIO.read(new File("Users/al/"+pictureName+".png"));
		}
		catch(IOException e){}
	}
}
