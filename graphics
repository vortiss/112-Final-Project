import javax.swing.JPanel;
import javax.swing.JFrame;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Dimension;
import java.util.Random;
import java.awt.event.KeyListener;
import java.awt.event.KeyEvent;

public class graphics extends JPanel implements KeyListener{
    public static final int WIDTH = 1024;
    public static final int HEIGHT = 768;
    public static final int FPS = 60;
    World world;
    
    class Runner implements Runnable{
	public void run()
	{
	    while(true){
		world.updateState(1.0 / (double)FPS);
		repaint();
		try{
		    Thread.sleep(1000/FPS);
		}
		catch(InterruptedException e){}
	    }
	    
	}
	
    }
    
    
    public void keyPressed(KeyEvent e) {
        char c=e.getKeyChar();
	System.out.println("You pressed down: " + c);
	commands(e);	
    }
    public void keyReleased(KeyEvent e) {
        char c=e.getKeyChar();
	System.out.println("\tYou let go of: " + c);
       
    }
    
    
    public void keyTyped(KeyEvent e) {
	char c = e.getKeyChar();
	System.out.println("You typed: " + c);
    }
    public void addNotify() {
        super.addNotify();
        requestFocus();
    }
    public void commands(KeyEvent e){
	char c=e.getK0eyChar();
	if(c=='w'||c=='a'||c=='s'||c=='d'){
	    userObject.move(c,world);
	}
    }
    public graphics(){
	world = new World(WIDTH, HEIGHT, 50);
	addKeyListener(this);
	this.setPreferredSize(new Dimension(WIDTH, HEIGHT));
	Thread mainThread = new Thread(new Runner());
	mainThread.start();
    }
    
    public static void main(String[] args){
	JFrame frame = new JFrame("Frogger+");
	frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
	graphics mainInstance = new graphics();
	frame.setContentPane(mainInstance);
	frame.pack();
	frame.setVisible(true);
    }
    
    
    public void paintComponent(Graphics g) {
	super.paintComponent(g);        
	
	g.setColor(Color.BLACK);
	g.fillRect(0, 0, WIDTH, HEIGHT);
	
	world.drawSpheres(g);
	
    }
    
    
}
class World{
    int height;
    int width;
    
    int numSpheres;
    Sphere spheres[];
    
    public World(int initWidth, int initHeight){
	width = initWidth;
	height = initHeight;
	obstacles=new obstacle[];
	for(int i=0; i< obstacle.size();i++){
	    obstacles[i]=new obstacle;
	}
    }
    
    
    public void updateState(double time){
	for (int i = 0; i < numSpheres; i ++)
	   obstacles[i].update(this, time);
    }
    
}

